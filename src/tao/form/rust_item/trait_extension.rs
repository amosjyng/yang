use super::{Trait, Function};
use crate::tao::form::Collection;
use zamm_yin::node_wrappers::CommonNodeTrait;

/// Trait to extend Trait concept with functionality that can't be autogenerated as of yet.
pub trait TraitExtension: CommonNodeTrait {
    /// Add a function to the trait.
    fn add_function(&mut self, f: Function) {
        Collection::from(self.id()).add_member(&f.into());
    }

    /// Retrieve all the functions of this trait.
    fn functions(&self) -> Vec<Function> {
        Collection::from(self.id()).members().into_iter().map(|m| Function::from(m.id())).collect()
    }
}

impl TraitExtension for Trait {}
