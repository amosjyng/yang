/// Mark files as autogenerated.
pub mod mark_autogen;
/// Mark lines as not needing formatting.
///
/// Sometimes, it's just too hard to autogenerate perfectly formatted code.
pub mod mark_fmt;

use super::CodegenConfig;
use mark_autogen::add_autogeneration_comments;
use mark_fmt::add_fmt_skips;

/// Do post-processing on generated code. Includes marking lines with autogeneration comments, or
/// marking lines as requiring formatting skips.
pub fn post_process_generation(code: &str, options: &CodegenConfig) -> String {
    let formatted = if options.add_rustfmt_attributes {
        add_fmt_skips(&code)
    } else {
        code.to_owned()
    };
    if options.comment_autogen && !options.release {
        add_autogeneration_comments(&formatted)
    } else {
        formatted
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::codegen::string_format::code_form;
    use crate::codegen::string_format::FormatConfig;
    use crate::codegen::StructConfig;
    use mark_autogen::AUTOGENERATION_MARKER;
    use mark_fmt::FMT_SKIP_MARKER;

    #[test]
    fn test_post_process_comments() {
        let code = code_form(&FormatConfig::default());
        let result = post_process_generation(&code, &CodegenConfig::default());
        assert!(result.contains(AUTOGENERATION_MARKER));
        assert!(result.contains("YIN_MAX_ID"));
    }

    #[test]
    fn test_post_process_no_comments() {
        let code = code_form(&FormatConfig::default());
        let result = post_process_generation(
            &code,
            &CodegenConfig {
                comment_autogen: false,
                ..CodegenConfig::default()
            },
        );
        assert!(!result.contains(AUTOGENERATION_MARKER));
    }

    #[test]
    fn test_post_process_fmt_not_skip() {
        let code = code_form(&FormatConfig {
            this: StructConfig {
                name: "S".to_owned(), // short
                ..StructConfig::default()
            },
            ..FormatConfig::default()
        });
        let result = post_process_generation(&code, &CodegenConfig::default());
        assert!(!result.contains(FMT_SKIP_MARKER));
    }

    #[test]
    fn test_post_process_fmt_skip() {
        let code = code_form(&FormatConfig {
            this: StructConfig {
                name: "ReallySuperLongClassNameOhBoy".to_owned(),
                ..StructConfig::default()
            },
            ..FormatConfig::default()
        });
        let result = post_process_generation(
            &code,
            &CodegenConfig {
                release: false,
                ..CodegenConfig::default()
            },
        );
        assert!(result.contains(FMT_SKIP_MARKER));
    }

    #[test]
    fn test_post_process_fmt_skip_release() {
        let code = code_form(&FormatConfig {
            this: StructConfig {
                name: "ReallySuperLongClassNameOhBoy".to_owned(),
                ..StructConfig::default()
            },
            ..FormatConfig::default()
        });
        let result = post_process_generation(
            &code,
            &CodegenConfig {
                release: true,
                ..CodegenConfig::default()
            },
        );
        assert!(result.contains(FMT_SKIP_MARKER));
    }
}
