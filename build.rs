use std::env;
use std::path::Path;
use std::process::Command;

/// The version of the Yang that will be used to generate build files.
const YANG_DEP_VERSION: &str = "0.0.1";

/// Build `yang` using itself.
fn main() {
    // no need to regenerate autogenerated files every time
    println!("cargo:rerun-if-changed=build.rs");
    // do rerun if autogenerated file gets removed
    println!("cargo:rerun-if-changed=src/concepts/attributes/target.rs");

    let out_dir = env::var("OUT_DIR").unwrap();
    let yang_binary = format!("{}/yang-v{}", out_dir, YANG_DEP_VERSION);

    if Path::new(&yang_binary).exists() {
        println!("Yang executable already exists at {}", yang_binary);
    } else {
        let yang_url = format!(
            "https://bintray.com/amosjyng/zamm/download_file?file_path=yang%2F{}%2Fmac%2Fyang",
            YANG_DEP_VERSION
        );

        println!("Bintray URL determined to be {}", yang_url);
        println!("Yang executable will be saved locally to {}", yang_binary);

        Command::new("wget")
            .args(&["-O", yang_binary.as_str(), yang_url.as_str()])
            .output()
            .expect(
                format!(
                    "Can't download yang version {} from Bintray.",
                    YANG_DEP_VERSION
                )
                .as_str(),
            );
    }

    Command::new("chmod")
        .args(&["+x", yang_binary.as_str()])
        .output()
        .expect(
            format!(
                "Could not add execute permissions to yang binary located at {}",
                yang_binary
            )
            .as_str(),
        );

    Command::new(yang_binary.as_str())
        .args(&[
            "Target",
            "--id",
            "2",
            "-d",
            "The target of an implement command.",
        ])
        .output()
        .expect(
            format!(
                "Could not generate attribute `Target` using yang binary located at {}",
                yang_binary
            )
            .as_str(),
        );
}
